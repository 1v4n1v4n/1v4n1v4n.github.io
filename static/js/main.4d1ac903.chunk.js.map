{"version":3,"sources":["App.js","index.js"],"names":["quotesData","setRandomColor","colors","document","body","style","backgroundColor","Math","floor","random","length","App","state","myQuote","fetch","response","json","data","this","setState","quotes","$","animate","opacity","text","quote","html","author","setTimeout","color","id","className","type","url","onPress","window","open","onClick","update","href","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"uKA+FIA,E,mHAVJ,SAASC,IACP,IAAIC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACvIC,SAASC,KAAKC,MAAMC,gBAAkBJ,EAAOK,KAAKC,MAAMD,KAAKE,SAAWP,EAAOQ,SAUlEC,M,kDA3Fb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,QAAS,cAJC,E,wLAUA,yI,SACWC,MADX,0I,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNjB,EAAaiB,EACbC,KAAKC,SAAS,CAACN,QAASb,EAAWoB,OAAOb,KAAKC,MAAMD,KAAKE,SAAWT,EAAWoB,OAAOV,W,qIAI/E,IAAD,OAEHD,EAASF,KAAKC,MAAMD,KAAKE,SAAWT,EAAWoB,OAAOV,QAG1DW,IAAE,eAAeC,QACf,CAAEC,QAAS,GACX,KACA,WACEF,IAAEH,MAAMI,QAAQ,CAAEC,QAAS,GAAI,KAC/BF,IAAE,SAASG,KAAKxB,EAAWoB,OAAOX,GAAQgB,UAI9CJ,IAAE,iBAAiBC,QACjB,CAAEC,QAAS,GACX,KACA,WACEF,IAAEH,MAAMI,QAAQ,CAAEC,QAAS,GAAI,KAC/BF,IAAE,WAAWK,KAAK,KAAO1B,EAAWoB,OAAOX,GAAQkB,WAKvDC,YAAW,WAAQ,EAAKT,SAAS,CAACU,MAAO5B,IAAkBY,QAASb,EAAWoB,OAAOX,OAAa,O,+BAG3F,IAAD,OACT,OACE,yBAAKqB,GAAG,QACR,yBAAKA,GAAG,aACR,yBAAKC,UAAY,cACf,uBAAG1B,MAAO,CAACwB,MAAO1B,SAASC,KAAKC,MAAMC,kBAAmB,0BAAMwB,GAAG,QAAQZ,KAAKN,MAAMC,QAAQY,SAE7F,yBAAKM,UAAU,gBACf,uBAAG1B,MAAO,CAACwB,MAAO1B,SAASC,KAAKC,MAAMC,kBAAmB,0BAAMwB,GAAG,UAAT,KAAqBZ,KAAKN,MAAMC,QAAQc,UAEjG,yBAAKI,UAAU,YACf,yBAAKA,UAAU,WAEf,kBAAC,sBAAD,CACEC,KAAK,WACLC,IAAI,sGACJ5B,MAAO,CAACC,gBAAiBH,SAASC,KAAKC,MAAMC,kBAH/C,SAKA,0BAAMD,MAAO,CAACwB,MAAO,UAArB,KAEA,kBAAC,sBAAD,CACEG,KAAK,UAAUE,QAAS,kBAkBfD,EAlB4B,8EAAgF,EAAKrB,MAAMC,QAAQY,MAAQ,KAChJ,EAAKb,MAAMC,QAAQc,YAkBzBQ,OAAOC,KAAKH,EAAK,QAAS,kGAD5B,IAAiBA,GAjBoB5B,MAAO,CAACC,gBAAiBH,SAASC,KAAKC,MAAMC,kBAC3E,uBAAGwB,GAAG,eAAN,WAGD,4BAAQC,UAAU,UAAU1B,MAAO,CAACC,gBAAiBH,SAASC,KAAKC,MAAMC,iBAAkB+B,QAAS,WAAO,EAAKC,WAAhH,cAEF,gCAAQ,uBAAGC,KAAK,+BAAR,iB,GA3EMC,IAAMC,WCCxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAAS0C,eAAe,W","file":"static/js/main.4d1ac903.chunk.js","sourcesContent":["import React from 'react';\nimport $ from 'jquery';\nimport { AwesomeButtonSocial } from \"react-awesome-button\";\n\nclass App extends React.Component {\n  \n  constructor() {\n    super()\n  \n    this.state = {\n      myQuote: \"Loading...\",\n    }\n  }\n\n  // fetching data from an online JSON file\n  async componentDidMount() {\n    const url = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n    const response = await fetch(url);\n    const data = await response.json();\n    quotesData = data;\n    this.setState({myQuote: quotesData.quotes[Math.floor(Math.random() * quotesData.quotes.length)]});\n  }\n\n  // function for dynamically changing data \n  update() {\n\n    let random = Math.floor(Math.random() * quotesData.quotes.length);\n\n    // using jQuery's animate for the quote's text and author\n    $(\".quote-text\").animate(\n      { opacity: 0 },\n      500,\n      function() {\n        $(this).animate({ opacity: 1}, 500);\n        $('#text').text(quotesData.quotes[random].quote);\n      }\n    );\n  \n    $(\".quote-author\").animate(\n      { opacity: 0 },\n      500,\n      function() {\n        $(this).animate({ opacity: 1}, 500);\n        $('#author').html(\"- \" + quotesData.quotes[random].author);\n      }\n    );\n\n    // dynamically change color\n    setTimeout(() => { this.setState({color: setRandomColor(), myQuote: quotesData.quotes[random]}) }, 500);\n    }\n\n  render() {\n  return (\n    <div id=\"full\">\n    <div id=\"quote-box\">\n    <div className = \"quote-text\">\n      <p style={{color: document.body.style.backgroundColor }}><span id=\"text\">{this.state.myQuote.quote}</span></p></div>\n      \n      <div className=\"quote-author\">\n      <p style={{color: document.body.style.backgroundColor }}><span id=\"author\">- {this.state.myQuote.author}</span></p></div>\n      \n      <div className=\"buttons\"></div>\n      <div className=\"awesome\">     \n      {/*Share the random quote machine!*/}\n      <AwesomeButtonSocial\n        type=\"facebook\"\n        url=\"http://www.facebook.com/sharer/sharer.php?u=https://1v4n1v4n.github.io/machine&t=RandomQuoteMachine\" \n        style={{backgroundColor: document.body.style.backgroundColor}}\n      >Share</AwesomeButtonSocial>\n      <span style={{color: \"white\"}}>I</span>\n      {/*Tweet the quote displayed...*/}\n      <AwesomeButtonSocial\n        type=\"twitter\" onPress={()=> openURL('https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + this.state.myQuote.quote + '\" ' + \n        this.state.myQuote.author)}  style={{backgroundColor: document.body.style.backgroundColor }}\n      ><a id=\"tweet-quote\">Tweet</a></AwesomeButtonSocial>\n      </div>\n\n      <button className=\"button1\" style={{backgroundColor: document.body.style.backgroundColor}} onClick={() => {this.update()}}>New Quote</button>\n    </div> \n    <footer><a href=\"https://github.com/1v4n1v4n\">by 1v4n</a></footer>\n    </div>\n  );\n  }\n}\n// function for getting a random color from an array\nfunction setRandomColor() {\n  var colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\n  document.body.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n}\n// needed function for the share option\nfunction openURL(url){\n  window.open(url, 'Share', 'width=550, height=400, toolbar=0, scrollbars=1 ,location=0 ,statusbar=0,menubar=0, resizable=0');\n}\n\n// needed variable for saving the fetched data\nlet quotesData;\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}