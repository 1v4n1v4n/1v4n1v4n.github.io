{"version":3,"sources":["App.js","index.js"],"names":["quotesData","App","props","state","myQuote","fetch","response","json","data","this","setState","quotes","Math","floor","random","length","$","animate","opacity","text","quote","html","author","setTimeout","color","setRandomColor","Container","id","className","style","document","body","backgroundColor","onClick","openURL","visibility","update","href","React","Component","colors","url","window","open","ReactDOM","render","StrictMode","getElementById"],"mappings":"uKAyFIA,E,oHArFiBC,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAAS,cAJM,E,wLAUL,yI,SACWC,MADX,0I,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNR,EAAaQ,EACbC,KAAKC,SAAS,CAACN,QAASJ,EAAWW,OAAOC,KAAKC,MAAMD,KAAKE,SAAWd,EAAWW,OAAOI,W,qIAI/E,IAAD,OAEHD,EAASF,KAAKC,MAAMD,KAAKE,SAAWd,EAAWW,OAAOI,QAG1DC,IAAE,eAAeC,QACf,CAAEC,QAAS,GACX,KACA,WACEF,IAAEP,MAAMQ,QAAQ,CAAEC,QAAS,GAAI,KAC/BF,IAAE,SAASG,KAAKnB,EAAWW,OAAOG,GAAQM,UAI9CJ,IAAE,iBAAiBC,QACjB,CAAEC,QAAS,GACX,KACA,WACEF,IAAEP,MAAMQ,QAAQ,CAAEC,QAAS,GAAI,KAC/BF,IAAE,WAAWK,KAAK,KAAOrB,EAAWW,OAAOG,GAAQQ,WAKvDC,YAAW,WAAQ,EAAKb,SAAS,CAACc,MAAOC,IAAkBrB,QAASJ,EAAWW,OAAOG,OAAa,O,+BAG3F,IAAD,OACT,OACE,kBAACY,EAAA,EAAD,KACA,yBAAKC,GAAG,aACN,yBAAKC,UAAY,cACf,uBAAGC,MAAO,CAACL,MAAOM,SAASC,KAAKF,MAAMG,kBAAoBvB,KAAKN,MAAMC,QAAQgB,QAE/E,yBAAKQ,UAAU,gBACb,uBAAGC,MAAO,CAACL,MAAOM,SAASC,KAAKF,MAAMG,kBAAtC,KAA4DvB,KAAKN,MAAMC,QAAQkB,SAEjF,yBAAKM,UAAU,WACf,yBAAKA,UAAU,gBACb,4BAAQC,MAAO,CAACG,gBAAiBF,SAASC,KAAKF,MAAMG,iBAAkBC,QAAS,kBAAKC,EAAQ,yCAC7F,uBAAGN,UAAU,kBADb,SAEA,0BAAMC,MAAO,CAACM,WAAY,WAA1B,MACA,4BAAQN,MAAO,CAACG,gBAAiBF,SAASC,KAAKF,MAAMG,iBAAkBC,QAAS,kBAAKC,EAAQ,8EAAgF,EAAK/B,MAAMC,QAAQgB,MAAQ,KACxM,EAAKjB,MAAMC,QAAQkB,UAAW,uBAAGM,UAAU,mBAD3C,WAGA,0BAAMC,MAAO,CAACM,WAAY,WAA1B,MACA,4BAAQN,MAAO,CAACG,gBAAiBF,SAASC,KAAKF,MAAMG,iBAAkBC,QAAS,WAAO,EAAKG,WAA5F,cAEA,gCAAQ,uBAAGR,UAAU,SAASS,KAAK,+BAA3B,kB,GApEiBC,IAAMC,WA2EvC,SAASd,IACP,IAAIe,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACvIV,SAASC,KAAKF,MAAMG,gBAAkBQ,EAAO5B,KAAKC,MAAMD,KAAKE,SAAW0B,EAAOzB,SAGjF,SAASmB,EAAQO,GACfC,OAAOC,KAAKF,EAAK,QAAS,kGChF5BG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASiB,eAAe,W","file":"static/js/main.38f85c83.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nexport default class App extends React.Component {\r\n  \r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n      myQuote: \"Loading...\",\r\n    }\r\n  }\r\n\r\n  // fetching data from an online JSON file\r\n  async componentDidMount() {\r\n    const url = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    quotesData = data;\r\n    this.setState({myQuote: quotesData.quotes[Math.floor(Math.random() * quotesData.quotes.length)]});\r\n  }\r\n\r\n  // function for dynamically changing data \r\n  update() {\r\n\r\n    let random = Math.floor(Math.random() * quotesData.quotes.length);\r\n\r\n    // using jQuery's animate for the quote's text and author\r\n    $(\".quote-text\").animate(\r\n      { opacity: 0 },\r\n      500,\r\n      function() {\r\n        $(this).animate({ opacity: 1}, 500);\r\n        $('#text').text(quotesData.quotes[random].quote);\r\n      }\r\n    );\r\n  \r\n    $(\".quote-author\").animate(\r\n      { opacity: 0 },\r\n      500,\r\n      function() {\r\n        $(this).animate({ opacity: 1}, 500);\r\n        $('#author').html(\"- \" + quotesData.quotes[random].author);\r\n      }\r\n    );\r\n\r\n    // dynamically change color\r\n    setTimeout(() => { this.setState({color: setRandomColor(), myQuote: quotesData.quotes[random]}) }, 500);\r\n    }\r\n\r\n  render() {\r\n  return (\r\n    <Container>\r\n    <div id=\"quote-box\">\r\n      <div className = \"quote-text\">\r\n        <p style={{color: document.body.style.backgroundColor }}>{this.state.myQuote.quote}</p>\r\n      </div>\r\n      <div className=\"quote-author\">\r\n        <p style={{color: document.body.style.backgroundColor }}>- {this.state.myQuote.author}</p>\r\n      </div>\r\n      <div className=\"buttons\">\r\n      <div className=\"buttons-left\">\r\n        <button style={{backgroundColor: document.body.style.backgroundColor}} onClick={()=> openURL('https://github.com/1v4n1v4n/machine')}>\r\n        <i className=\"fab fa-github\" /> Fork</button>\r\n        <span style={{visibility: 'hidden'}}>II</span>\r\n        <button style={{backgroundColor: document.body.style.backgroundColor}} onClick={()=> openURL('https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + this.state.myQuote.quote + '\" ' + \r\n        this.state.myQuote.author)}  ><i className=\"fab fa-twitter\" /> Tweet</button>\r\n      </div>\r\n        <span style={{visibility: 'hidden'}}>II</span>\r\n        <button style={{backgroundColor: document.body.style.backgroundColor}} onClick={() => {this.update()}}>New Quote</button>\r\n      </div>\r\n        <footer><a className=\"footer\" href=\"https://github.com/1v4n1v4n\">by 1v4n</a></footer>\r\n    </div>\r\n    </Container>\r\n  );\r\n  }\r\n}\r\n// function for getting a random color from an array\r\nfunction setRandomColor() {\r\n  var colors = ['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \"#77B1A9\", \"#73A857\"];\r\n  document.body.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\r\n}\r\n// needed function for the share option\r\nfunction openURL(url){\r\n  window.open(url, 'Share', 'width=550, height=400, toolbar=0, scrollbars=1 ,location=0 ,statusbar=0,menubar=0, resizable=0');\r\n}\r\n\r\n// needed variable for saving the fetched data\r\nlet quotesData;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}